<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" tabBarVisible="false" title="{data.title}" viewActivate="init(event)">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			private var startIndex:int;
			private var loading:Boolean;
			public var months:Object = new Object();
			private var searchTerm:String;
			private var isSearch:Boolean;
			private var myDeleteStatement:SQLStatement = new SQLStatement();
			
			protected function init(event:ViewNavigatorEvent):void
			{
				months["01"] = "January";
				months["02"] = "February";
				months["03"] = "March";
				months["04"] = "April";
				months["05"] = "May";
				months["06"] = "June";
				months["07"] = "July";
				months["08"] = "August";
				months["09"] = "September";
				months["10"] = "October";
				months["11"] = "November";
				months["12"] = "December";
				
				isSearch = false;
				myBusy.visible = true;
				startIndex = 1;
				channelUploads.url = "https://gdata.youtube.com/feeds/api/users/"+data.channelID+"/uploads?max-results=20&start-index="+startIndex;
				channelUploads.send();
			}
			
			protected function playVideo(event:IndexChangeEvent):void
			{
				var myObject:Object = new Object();
				myObject.title = videosList.selectedItem.title;
				myObject.url = videosList.selectedItem.id.slice(42, 55);
				navigator.pushView(VideoDetails, myObject);
			}
			
			protected function buttonBarHandler(event:IndexChangeEvent):void
			{
				currentState = myButtonBar.selectedItem.state;
			}
			
			protected function channelUploads_resultHandler(event:ResultEvent):void
			{
				if(videosList.dataProvider == null){
					videosList.dataProvider = event.result.feed.entry;
				} else {
					for each ( var item : * in event.result.feed.entry){
						videosList.dataProvider.addItem(item);
					}
				}
				
				loading = false;
				myBusy.visible = false;
			}
			
			protected function channelPlaylists_resultHandler(event:ResultEvent):void
			{
				playlistList.dataProvider = event.result.feed.entry;
			}
			
			protected function playlistList_changeHandler(event:IndexChangeEvent):void
			{
				var myObject:Object = new Object();
				myObject.id = playlistList.selectedItem.playlistId;
				myObject.title =  playlistList.selectedItem.title;
				navigator.pushView(YoutubeChannelPlaylist, myObject);
			}
			
			protected function videosList_creationCompleteHandler(event:FlexEvent):void
			{
				videosList.scroller.viewport.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, propertyChangeHandler);
			}
			
			protected function propertyChangeHandler( event : PropertyChangeEvent):void {
				if(event.property == "verticalScrollPosition"){
					if(event.newValue == ( event.currentTarget.measuredHeight - event.currentTarget.height)){
						loadMore();
					}
				}
			}
			
			public function loadMore():void{
				if(!loading){
					myBusy.visible = true;
					loading = true;
					startIndex+=20;
					if(isSearch){
						channelUploads.url = "https://gdata.youtube.com/feeds/api/users/"+data.channelID+"/uploads?max-results=20&q="+searchTerm+"&start-index="+startIndex;
					} else {
						channelUploads.url = "https://gdata.youtube.com/feeds/api/users/"+data.channelID+"/uploads?max-results=20&start-index="+startIndex;
					}
					channelUploads.send();
				}
			}
			
			private function loadPlaylists():void{
				channelPlaylists.url = "https://gdata.youtube.com/feeds/api/users/"+data.channelID+"/playlists?max-results=50&start-index=1";
				channelPlaylists.send();
			}
			
			private function deleteChannel():void{
				myDeleteStatement.sqlConnection = FlexGlobals.topLevelApplication.conn;
				myDeleteStatement.addEventListener(SQLEvent.RESULT, deleteDatabaseResult);
				
				var myQuery:String = "DELETE FROM users_channels WHERE id ="+data.id;
				
				myDeleteStatement.text = myQuery;
				myDeleteStatement.execute();
			}		
			
			private function deleteDatabaseResult(event:SQLEvent):void{
				navigator.popView();
			}
			
			protected function customSearch():void
			{
				if(searchTxt.text == ""){
					//do nothing
				} else {
					
					stage.focus = null;
					searchTerm = searchTxt.text;
					isSearch = true;
					myBusy.visible = true;
					startIndex = 1;
					
					videosList.dataProvider = new ArrayList(new Array());
					
					channelUploads.url = "https://gdata.youtube.com/feeds/api/users/"+data.channelID+"/uploads?max-results=20&q="+searchTerm+"&start-index="+startIndex;
					channelUploads.send();
				}
			}
			
		]]>
	</fx:Script>
	
	
	
	<fx:Declarations>
		<s:HTTPService id="channelUploads" result="channelUploads_resultHandler(event)"/>
		<s:HTTPService id="channelPlaylists" result="channelPlaylists_resultHandler(event)"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="uploadsState"/>
		<s:State name="playlistState" enterState="loadPlaylists()"/>
	</s:states>
	
	<s:Rect x="0" width="100%" height="110" top="0">		
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:entries>
					<s:GradientEntry color="#006D7B"/>
					<s:GradientEntry color="#1F3C4B"/>														
				</s:entries>
			</s:LinearGradient>	
		</s:fill>
	</s:Rect>
	
	<s:ButtonBar id="myButtonBar" color="#FFFFFF" fontFamily="MyFont2" fontSize="10" fontWeight="normal" chromeColor="#1F3C4B" change="buttonBarHandler(event)" requireSelection="true" selectedIndex="0" horizontalCenter="0" top="10" height="35">
		<s:ArrayList>
			<fx:Object label="Recent Uploads" state="uploadsState"/>
			<fx:Object label="Playlists" state="playlistState"/>
		</s:ArrayList>
		<s:layout>
			<s:TileLayout requestedRowCount="1" columnWidth="140" horizontalGap="0" rowHeight="35" />
		</s:layout>
	</s:ButtonBar>
	
	<s:Line width="100%" height="1" y="55">
		<s:stroke>
			<s:SolidColorStroke color="#617680"/>
		</s:stroke>
	</s:Line>
	
	<s:TextInput includeIn="uploadsState" id="searchTxt" left="10" right="55" top="65" height="35" prompt="Type Search Term" autoCorrect="false" enter="customSearch()"/>
	<s:Image includeIn="uploadsState" source="@Embed('assets/icons/search.png')" smooth="true" scaleMode="letterbox" width="35" height="35" right="10" y="65" click="customSearch()"/>
	
	<s:List excludeFrom="playlistState" creationComplete="videosList_creationCompleteHandler(event)" id="videosList" change="playVideo(event)" width="100%" top="110" bottom="0">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer messageStyleName="myMessageStyle" iconWidth="67" iconHeight="50" iconFunction="myIconFunction" messageFunction="myMessageFunction" labelFunction="myLabelFunction">
					<fx:Script>
						<![CDATA[
							
							public function myIconFunction(item:Object):String{		
								return "http://i1.ytimg.com/vi/"+data.id.slice(42, 55)+"/default.jpg";								
							}
							
							public function myLabelFunction(item:Object):String{								
								return data.title;
							}
							
							public function myMessageFunction(item:Object):String{								
								return outerDocument.months[data.published.slice(5,7)]+" "+data.published.slice(8,10)+", "+data.published.slice(0,4);
							}
							
						]]>
					</fx:Script>
				</s:IconItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
	<s:List excludeFrom="uploadsState" change="playlistList_changeHandler(event)" id="playlistList" width="100%" top="55" bottom="0">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer messageStyleName="myMessageStyle2" labelFunction="myLabelFunction" messageFunction="myMessageFunction" iconFunction="myIconFunction" iconWidth="67" iconHeight="50">
					<fx:Script>
						<![CDATA[
							
							public function myLabelFunction(item:Object):String{								
								return "";
							}
							
							public function myMessageFunction(item:Object):String{								
								return data.title;
							}
							
							public function myIconFunction(item:Object):String{		
								if(data.group.thumbnail){
									return data.group.thumbnail[0].url;
								} else {
									return "";
								}							
							}
							
						]]>
					</fx:Script>
				</s:IconItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
	<s:BusyIndicator id="myBusy" verticalCenter="0" horizontalCenter="0" visible="false"/>
	
	<s:navigationContent>
		<s:Button click="navigator.popView()">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/icons/160/115-Film.png')"
										source240dpi="@Embed('assets/icons/240/115-Film.png')"
										source320dpi="@Embed('assets/icons/320/115-Film@2x.png')"/>
			</s:icon>
		</s:Button>
	</s:navigationContent>
	
	<s:actionContent>
		<s:CalloutButton horizontalPosition="middle">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/icons/160/072-Settings.png')"
										source240dpi="@Embed('assets/icons/240/072-Settings.png')"
										source320dpi="@Embed('assets/icons/320/072-Settings@2x.png')"/>
			</s:icon>
			<s:calloutLayout>
				<s:VerticalLayout gap="0"/>
			</s:calloutLayout>
			<s:ViewMenuItem width="200" height="100%" label="Delete Channel" click="deleteChannel()"/>
		</s:CalloutButton>
	</s:actionContent>
</s:View>
