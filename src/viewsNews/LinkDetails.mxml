<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		tabBarVisible="false" title="{data.title}" viewActivate="init(event)" backKeyPressed="backPress(event)"
		viewDeactivate="goBack(event)" >
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.events.ViewNavigatorEvent;
			
			private var myStageWebView:StageWebView;		
			private var fontPercent:Number;
			private var currentFlexScalingFactor:Number = FlexGlobals.topLevelApplication.runtimeDPI/FlexGlobals.topLevelApplication.applicationDPI;
			private var addPostStatement:SQLStatement;
			private var deleteStatement:SQLStatement;
		
			protected function init(event:ViewNavigatorEvent):void
			{		
				if(data.isSaved != undefined){
					if(data.isSaved == true){
						currentState = 'SavedState';
					} else {
						currentState = "UnsavedState";
					}
				}
				
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
	
				stage.addEventListener(Event.RESIZE, resize);
				myStageWebView = new StageWebView(true);
				myStageWebView.viewPort = new Rectangle(myRect.x, myRect.y*currentFlexScalingFactor+FlexGlobals.topLevelApplication.navigator.actionBar.height*currentFlexScalingFactor, myRect.width*currentFlexScalingFactor, myRect.height*currentFlexScalingFactor);
				myStageWebView.stage = this.stage;
				
				myStageWebView.loadURL(data.url);
			}
			
			protected function goBack(event:ViewNavigatorEvent):void
			{
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;
				myStageWebView.dispose();
				stage.removeEventListener(Event.RESIZE, resize);
			}
			
			protected function resize(event:Event):void
			{
				myStageWebView.viewPort = new Rectangle(myRect.x, myRect.y*currentFlexScalingFactor+FlexGlobals.topLevelApplication.navigator.actionBar.height*currentFlexScalingFactor, myRect.width*currentFlexScalingFactor, myRect.height*currentFlexScalingFactor);
			}
			
			private function SavePost():void
			{
				addPostStatement = new SQLStatement();
				addPostStatement.sqlConnection = FlexGlobals.topLevelApplication.conn;
				addPostStatement.addEventListener(SQLEvent.RESULT, addPostResult);
				addPostStatement.addEventListener(SQLErrorEvent.ERROR, addPostError);
				var addPostQuery:String = "INSERT INTO users_redditposts (gameID, postID, subredditID, title, selfpost, url, domain) VALUES ('"+data.gameid+"','"
					+data.postID+"','"
					+data.subredditID+"','"
					+escape(data.title)+"','"
					+data.selfpost+"','"
					+data.url+"','"
					+data.domain+"')";
				
				addPostStatement.text = addPostQuery;
				addPostStatement.execute();
			}
			
			
			private function addPostResult(event:SQLEvent):void{
				var result:SQLResult = addPostStatement.getResult();
				trace(result);
				saveBtn.visible = false;
			}
			
			private function addPostError(event:SQLErrorEvent):void{
				trace(event.error);
			}
			
			private function DeletePost():void{
				deleteStatement = new SQLStatement();
				deleteStatement.sqlConnection = FlexGlobals.topLevelApplication.conn;
				deleteStatement.addEventListener(SQLEvent.RESULT, deleteDatabaseResult);
				
				var myQuery:String = "DELETE FROM users_redditposts WHERE id ="+data.id;
				
				deleteStatement.text = myQuery;
				deleteStatement.execute();
			}		
			
			private function deleteDatabaseResult(event:SQLEvent):void{
				navigator.popView();
			}
			
			protected function backPress(event:FlexEvent):void
			{
				event.preventDefault();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:MultiDPIBitmapSource id="saveIcons" source160dpi="@Embed('assets/icons/160/178-Save.png')" source240dpi="@Embed('assets/icons/240/178-Save.png')" source320dpi="@Embed('assets/icons/320/178-Save@2x.png')"/>
		<s:MultiDPIBitmapSource id="DeleteIcons" source160dpi="@Embed('assets/icons/160/062-Trash.png')" source240dpi="@Embed('assets/icons/240/062-Trash.png')" source320dpi="@Embed('assets/icons/320/062-Trash@2x.png')" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="UnsavedState" />
		<s:State name="SavedState" />
	</s:states>
	
	<s:navigationContent>
		<s:Button click="navigator.popView()">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/icons/160/257-RSSAlt.png')"
										source240dpi="@Embed('assets/icons/240/257-RSSAlt.png')"
										source320dpi="@Embed('assets/icons/320/257-RSSAlt@2x.png')"/>
			</s:icon>
		</s:Button>		
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="saveBtn" click.UnsavedState="SavePost()" click.SavedState="DeletePost()" icon.UnsavedState="{saveIcons}" icon.SavedState="{DeleteIcons}" />
	</s:actionContent>
	
	<s:Rect id="myRect" radiusX="5" radiusY="5" left="10" right="10" top="10" bottom="10"/>
	
</s:View>

